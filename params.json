{"name":"Careless","tagline":"JSX 'fork' targeted at static XML documents generation","body":"# Careless\r\n\r\nA JSX/React fork for static XML generation especially useful to create\r\nebooks,\r\nemails,\r\nxhtml for PDF generators...\r\n\r\n\r\nExamples :\r\n```js\r\nvar Careless = require('careless');\r\n\r\n// Careless works with XML namespace and custom XML tags\r\nvar XslfoExample = function(props, context) {\r\n  return (\r\n    <fo:page-sequence master-reference=\"my-page\">\r\n      <fo:flow flow-name=\"xsl-region-body\">\r\n        <fo:block>{props.children}</fo:block>\r\n      </fo:flow>\r\n    </fo:page-sequence>\r\n  );\r\n};\r\n\r\nconsole.log(Careless.renderToString(<XslfoExample>Example</XslfoExample>, {}));\r\n\r\n// Careless doesn't care if you use string for inline style\r\nvar XhtmlExample = function(props, context) {\r\n  return (\r\n    <div>\r\n      <h1 style=\"margin-top: 5px;\">{props.title}</h1>\r\n      <div>\r\n        {{raw: context.html}}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Careless doesn't event care if you want to pass a \"global\" context when rendering\r\nconsole.log(Careless.renderToString(<XhtmlExample title=\"Careless\"/>, {html: \"<span>Raw HTML !</span>\"}));\r\n```\r\n\r\n# Why Careless\r\n\r\n## Spirit\r\n\r\nTemplating engines are often a pain:\r\n\r\n- A new DSL to learn\r\n- Often dumb string interpolation, easy to make mistakes\r\n- Customer interpreter : no tooling to easily debug the templates !\r\n\r\nJSX is a great idea by Facebook that enable us to write XML directly in JS :\r\nno need for a templating engine, your JS becomes the engine !\r\nYou can write your template directly in your JS code,\r\nyou can require() your components,\r\nyou can use node-debug to debug your template.\r\n\r\nThe only problem, is that ReactJS/Facebook's JSX is for building dynamic Single Page Apps. It only supports Xhtml, is\r\n very opinionated when it comes to attributes (no string inline styles, use className instead of class, ...) which is\r\n very helpful when writing a SPA, but doesn't serve us when writing a static XML document (that might even not be html).\r\n\r\nCareless is a fork of Facebook's JSX, that allows custom tags, custom attributes and XML namespaces : the only (?)\r\nXML features missing from Careless are doctypes and XML comments.\r\n\r\nBecause for a static document you don't need state, Careless doesn't use React components, but directly JS functions.\r\n\r\n## Use case\r\n\r\nThe main use case for Careless is to build dynamically generated mails for your customers :\r\n\r\n- You can use it to construct emails : it is particularly practical because in an email you have to inline styles\r\n(except media queries), and JSX syntax makes style inlining easier (of course you could still write your styles in a\r\nseparate CSS and use a tool like [juice](https://github.com/Automattic/juice) if you want to)\r\n- You can use it to construct paper mails using a PDF generator. If you write XSL-FO, you can use\r\nApache FOP or RenderX to generate PDF or AFP files. If you write HTML, you can use PhantomJS, PrinceXML or Antenna House\r\nto generate PDF.\r\n\r\n# Differences with Facebook flavored JSX/React\r\n\r\n## JSX : POJO instead of createElement\r\n\r\nCareless JSX compiles to pure POJOs (as next versions of React will do) and ES6 Object.assign for the spread attribute\r\n([also in next versions of React](https://github.com/facebook/react/issues/2417))\r\n\r\nThis way the creation of the nodes tree is separated from the rendering : because nodes are POJOs, you don't need to\r\nrequire Careless in the modules that do no rendering.\r\n\r\nNote: When you require careless, it will polyfill Object.assign if it doesn't exist\r\n\r\nExample :\r\n```js\r\nvar simpleDivWithId = <div id=\"div-id\">Simple Div</div>;\r\n\r\nvar attrs = {style: \"color: red;\"};\r\nvar divWithSpreadAttrs = <div {...attrs}>Div with spread</div>;\r\n```\r\n\r\ntranspiles to :\r\n\r\n```js\r\nvar simpleDivWithId = {type: \"div\", props: {id: \"div-id\", children: [\"Simple Div\"]}};\r\n\r\nvar attrs = {style: \"color: red;\"};\r\nvar divWithSpreadAttrs = {type: \"div\", props: Object.assign({}, attrs, {children: [\"Div with spread\"]})};\r\n```\r\n\r\n## JSX : XML support (XML namespace, custom tags, ...)\r\n\r\nCareless is not only html-focused. It will accept any kind of xml tags and even xml namespaces.\r\n\r\nIt allows you to write things like\r\n```js\r\n<page-sequence master-reference=\"A4\">\r\n  <afp:no-operation name=\"nop\">NOP</afp:no-operation>\r\n  <flow flow-name=\"xsl-region-body\" font-size=\"10pt\">\r\n    <block margin-top=\"8mm\">\r\n      Test\r\n    </block>\r\n  </flow>\r\n</page-sequence>\r\n```\r\n\r\n## Rendering : raw xml/html support\r\n\r\nCareless doesn't use `__dangerouslySetInnerHtml`, but the simpler (riskier ?) `{raw: \"<div>Raw HTML</div>\"}`\r\n\r\nExample:\r\n```js\r\nCareless.renderToString(<div>{{raw: \"<span>Raw HTML !</span>\"}}</div>);\r\n```\r\n\r\n## Rendering : no state, no class !\r\n\r\nWhen generating a static document, there is little need for state.\r\nTherefore there is no Careless.createClass.\r\nIf you want to create a component, just write a function !\r\n\r\n```js\r\nfunction Custom(props) {\r\n  return <span>A custom {props.content}</span>;\r\n}\r\n\r\nCareless.renderToString(<div><Custom content=\"Tag\"/></div>);\r\n```\r\n\r\n## Rendering : special handling of attributes\r\n\r\nTo give a CSS class to your HTML tag, just use the `class` attribute, not `className`.\r\n\r\nInline styles can be written directly as a string, no need to use an object if you don't want to.\r\n\r\n```js\r\n// This is OK in careless but not in react\r\nvar divWithClass = <div class=\"header\"></div>;\r\n\r\n// This is KO in careless, but what you should do in react\r\nvar otherDivWithClass = <div classname=\"header\"></div>;\r\n\r\n// This is OK both in react and careless\r\nvar style = {color: \"red\"};\r\nvar divWithStyle = <div style={style}></div>;\r\n\r\n// This OK only in careless (because it doesn't care), but not valid react\r\nvar otherDivWithStyle = <div style=\"color: red;\"></div>\r\n```\r\n\r\n# Context\r\n\r\nWhen generating static documents, typically mails for your customers, it is very practical to have a global context\r\ncontaining the customer common datas.\r\nCareless allows you to pass automatically this context down to every child components.\r\n\r\n\r\nExamples :\r\n```js\r\nvar Careless = require('careless');\r\n\r\nvar Recipient = function(props, context) {\r\n  var customer = context.customer;\r\n  return (\r\n    <div>\r\n            {customer.name}<br />\r\n            {customer.address}<br />\r\n            {customer.city}\r\n    </div>\r\n  );\r\n};\r\n\r\nvar Mail = function(props, context) {\r\n  return (\r\n    <div>\r\n      <Recipient />\r\n      <div>Great discount today : {props.discount}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nvar context = {\r\n  customer: {\r\n    name: \"M. John Doe\",\r\n    address: \"26 rue de Berri\",\r\n    city: \"Paris\"\r\n  }\r\n};\r\n\r\nconsole.log(Careless.renderToString(<Mail discount=\"10%\" />, context));\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}